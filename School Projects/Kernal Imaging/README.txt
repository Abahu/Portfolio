This is a school project where I did a little bit extra just for fun. We wrote this program to do some kernal image processing. At this point, the goal was to make the program invoke the chain of dependencies to get the desired output from one source/filter to another filter/sink. The issue for me was that each time the chain was called the same expensive work had to be done. To fix this, I made it so that if a filter/source had been run, it would just give its stored output without recomputing it. The output had to be stored with each source/filter anyway. I then made it so that if the input changed for this filter, it and everything that depended on it was able to recompute the output. This meant that the output would only be computed when there was a new input.

This added logic is in Update and SetUpdate in the Filter and Source classes.